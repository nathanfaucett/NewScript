(var list (fn args (call List of args)))
(var = (fn [a b] (call compare isEqual a b)))
(var <= (fn [a b] (call compare lessThanEqual a b)))
(var not (fn [a] (call compare not a)))
(var != (fn [a b] (not (= a b))))

(var + (fn [a b] (call math add a b)))
(var - (fn [a b] (call math sub a b)))
(var * (fn [a b] (call math mul a b)))
(var / (fn [a b] (call math div a b)))

(var fac (fn [x]
    (if (<= x 1) 1 (* x (fac (- x 1))))))

(log (quote +) (+ 1 1))
(log (quote -) (- 2 1))
(log (quote *) (* 2 2))
(log (quote /) (/ 4 2))

(log (quote fac) (fac 1))
(log (quote fac) (fac 2))
(log (quote fac) (fac 3))
(log (quote fac) (fac 4))
(log (quote fac) (fac 5))

(defmacro defn [name args body] (list (quote var) name ((quote fn) args body)))
(defn add [a b] (+ a b))